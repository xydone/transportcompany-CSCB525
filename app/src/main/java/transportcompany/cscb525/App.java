/*
 * This source file was generated by the Gradle 'init' task
 */
package transportcompany.cscb525;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;

import transportcompany.cscb525.configuration.SessionFactoryUtil;
import transportcompany.cscb525.util.InputUtil;
import transportcompany.cscb525.util.Menu;
import transportcompany.cscb525.dao.*;
import transportcompany.cscb525.dto.CompanyDto;
import transportcompany.cscb525.entity.*;
import transportcompany.cscb525.exceptions.CompanyNotFoundException;
import transportcompany.cscb525.exceptions.InsufficientVehicleCapacityException;
import transportcompany.cscb525.exceptions.InvalidEmployeeLicenseException;
import transportcompany.cscb525.exceptions.InvalidVehicleTypeException;
import transportcompany.cscb525.service.ClientService;
import transportcompany.cscb525.service.EmployeeService;
import transportcompany.cscb525.service.TransportService;
import transportcompany.cscb525.service.VehicleService;
import transportcompany.cscb525.types.License;
import transportcompany.cscb525.types.TransportType;

public class App {
    public static void main(String[] args) throws IOException {
        Optional<Company> maybeCompany = Optional.empty();
        Scanner scanner = new Scanner(System.in);
        SessionFactoryUtil.getSessionFactory().openSession();
        while (true) {
            if (maybeCompany.isEmpty()) {
                Menu initalMenu = new Menu("NQMA IZBRANA KOMPANIQ");
                initalMenu.addOption(1, "Dobavqne na kompaniq");
                initalMenu.addOption(2, "Izbirane na kompaniq");
                initalMenu.addOption(0, "exit");

                int choice = initalMenu.listen(scanner, "");

                switch (choice) {
                    // add company
                    case 1:
                        String name = InputUtil.readString(scanner, "Izberete imeto na kompaniqta");
                        Company createdCompany = new Company(name);
                        CompanyDao.createCompany(createdCompany);
                        maybeCompany = Optional.of(createdCompany);
                        break;
                    // choose company
                    case 2:
                        long shop_id = InputUtil.readLong(scanner, "Izberete kompaniq (ID-to na kompaniqta): ");
                        try {
                            Company foundCompany = CompanyDao.getCompanyById(shop_id);
                            maybeCompany = Optional.of(foundCompany);
                        } catch (CompanyNotFoundException e) {
                            System.out.println(e.getMessage());
                        }
                        break;
                    case 0:
                        scanner.close();
                        return;
                    default:
                        System.out.println("Ne sushtestvuva.");
                        break;

                }

            } else {
                // if here, company is selected, optional is safe
                Company currentCompany = maybeCompany.get();

                Menu companyMenu = new Menu(currentCompany.getName());
                companyMenu.addOption(1, "Nastroiki");
                companyMenu.addOption(2, "Klienti");
                companyMenu.addOption(3, "Prevozni sredstva");
                companyMenu.addOption(4, "Slujiteli");
                companyMenu.addOption(5, "Prevozi");
                companyMenu.addOption(9, "Danni");
                companyMenu.addOption(0, "exit");

                int choice = companyMenu.listen(scanner, "");

                switch (choice) {
                    // settings
                    case 1:
                        settingsMenu(maybeCompany, scanner, currentCompany);
                        break;

                    // clients
                    case 2:
                        clientsMenu(scanner, currentCompany);
                        break;

                    // vehicles
                    case 3:
                        vehiclesMenu(scanner, currentCompany);
                        break;

                    // employees
                    case 4: {
                        employeesMenu(scanner, currentCompany);
                        break;
                    }

                    // transport
                    case 5: {
                        transportMenu(scanner, currentCompany);
                        break;
                    }

                    // data
                    case 9: {
                        dataMenu(scanner, currentCompany);
                        break;
                    }

                    case 0:
                        scanner.close();
                        return;
                    default:
                        System.out.println("Ne sushtestvuva.");
                        break;

                }
            }
        }

    }

    private static void dataMenu(Scanner scanner, Company currentCompany) {
        Menu menu = new Menu("Danni");
        menu.addOption(1, "Kompanii");
        menu.addOption(2, "Slujiteli");
        menu.addOption(3, "Prevozi");
        menu.addOption(0, "back");

        int choice = menu.listen(scanner, "");
        switch (choice) {
            // companies
            case 1:
                filterSortCompanies(scanner);
                break;

            // staff
            case 2:
                filterSortStaff(scanner);
                break;
            // transport
            case 3:
                filterSortTransport(scanner);
                break;

            case 0:
                scanner.close();
                return;
            default:
                System.out.println("Ne sushtestvuva.");
                break;
        }
    }

    private static void filterSortStaff(Scanner scanner) {
        License licenseFilter = null;
        Long salaryFilter = null;
        boolean isSortAsc = false;

        boolean shouldExit = false;
        while (true) {
            Menu menu = new Menu("Danni - slujiteli");
            menu.addOption(1, "Knijka - " + licenseFilter);
            menu.addOption(2, "Zaplata - " + salaryFilter);
            menu.addOption(3, "Zaplata sort - " + (isSortAsc ? "ascending" : "descending"));
            menu.addOption(4, "Search");
            menu.addOption(0, "back");

            int choice = menu.listen(scanner, "");
            switch (choice) {
                // license filter
                case 1:
                    String licenseInput = InputUtil.readString(scanner,
                            "Izberete knijka za filter (A/B/C):");
                    try {
                        licenseFilter = License.valueOf(licenseInput);
                    } catch (Exception e) {
                        System.out.println("Nevalidna knijka!");
                    }
                    break;
                // salary filter
                case 2:
                    salaryFilter = InputUtil.readLong(scanner, "Vuvedete minimalen zaplata za filter:");
                    break;
                // flip sort
                case 3:
                    isSortAsc = !isSortAsc;
                    break;
                // search
                case 4:
                    List<Employee> filteredEmployees = EmployeeDao.filterEmployees(salaryFilter, licenseFilter,
                            isSortAsc);
                    System.out.println("\nFiltrirani slujiteli:");
                    EmployeeService.printEmployees(filteredEmployees);
                    shouldExit = true;
                    break;
                case 0:
                    shouldExit = true;
                    break;
                default:
                    System.out.println("Ne sushtestvuva.");
                    break;
            }
            // exit while loop if the filter is executed or if user wants to go back
            if (shouldExit) {
                break;
            }
        }
    }

    private static void filterSortTransport(Scanner scanner) {
        String startFilter = null;
        String endFilter = null;

        boolean shouldExit = false;
        while (true) {
            Menu menu = new Menu("Danni - prevozi");
            menu.addOption(1, "Nachalo - " + startFilter);
            menu.addOption(2, "Destinaciq - " + endFilter);
            menu.addOption(3, "Search");
            menu.addOption(0, "back");

            int choice = menu.listen(scanner, "");
            switch (choice) {
                // start filter
                case 1:
                    startFilter = InputUtil.readString(scanner, "Izberete nachalna tochka za filter:");
                    break;
                // end filter
                case 2:
                    endFilter = InputUtil.readString(scanner, "Izberete kraina tochka za filter:");
                    break;
                // search
                case 3:
                    List<Transport> filteredEmployees = TransportDao.filterTransports(startFilter, endFilter);
                    System.out.println("\nFiltrirani transporti:");
                    TransportService.printTransports(filteredEmployees);
                    shouldExit = true;
                    break;
                case 0:
                    shouldExit = true;
                    break;
                default:
                    System.out.println("Ne sushtestvuva.");
                    break;
            }
            // exit while loop if the filter is executed or if user wants to go back
            if (shouldExit) {
                break;
            }
        }
    }

    private static void filterSortCompanies(Scanner scanner) {
        String nameFilter = null;
        Long profitFilter = null;
        boolean isSortAsc = false;

        boolean shouldExit = false;
        while (true) {

            Menu menu = new Menu("Danni - kompanii");
            menu.addOption(1, "Ime - " + nameFilter);
            menu.addOption(2, "Profit - " + profitFilter);
            menu.addOption(3, "Profit sort - " + (isSortAsc ? "ascending" : "descending"));
            menu.addOption(4, "Search");
            menu.addOption(0, "back");

            int choice = menu.listen(scanner, "");
            switch (choice) {
                // name filter
                case 1:
                    nameFilter = InputUtil.readString(scanner, "Vuvedete ime za filter:");
                    break;
                // profit filter
                case 2:
                    profitFilter = InputUtil.readLong(scanner, "Vuvedete minimalen profit za filter:");
                    break;
                // flip sort
                case 3:
                    isSortAsc = !isSortAsc;
                    break;
                // run filters
                case 4:
                    List<CompanyDto> allCompanies = CompanyDao.filterCompanies(nameFilter, profitFilter,
                            isSortAsc);
                    System.out.println("\nFiltrirani kompanii:");
                    CompanyDto.printList(allCompanies);
                    shouldExit = true;
                    break;

                case 0:
                    shouldExit = true;
                    break;
                default:
                    System.out.println("Ne sushtestvuva.");
                    break;
            }
            // exit while loop if the filter is executed or if user wants to go back
            if (shouldExit) {
                break;
            }
        }
    }

    private static void transportMenu(Scanner scanner, Company currentCompany) {
        Menu companyTransportMenu = new Menu(currentCompany.getName() + " prevozi");
        companyTransportMenu.addOption(1, "Dobavqne");
        companyTransportMenu.addOption(2, "Promqna na status");
        companyTransportMenu.addOption(0, "back");

        List<Transport> transportList = TransportDao.getTransportsForCompany(currentCompany);

        int transportChoice = companyTransportMenu.listen(scanner, "");
        switch (transportChoice) {
            // add transport
            case 1:
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

                String departureString = InputUtil.readString(scanner, "Izberete data na trugvane:");
                LocalDate departure = LocalDate.parse(departureString, formatter);

                String arrivalString = InputUtil.readString(scanner, "Izberete data na pristigane:");
                LocalDate arrival = LocalDate.parse(arrivalString, formatter);

                String departureLocation = InputUtil.readString(scanner,
                        "Izberete lokaciq na trugvane:");

                String arrivalLocation = InputUtil.readString(scanner,
                        "Izberete lokaciq na pristigane:");

                long price = InputUtil.readLong(scanner, "Izberete cena:");

                String typeInput = InputUtil.readString(scanner,
                        "Izberete tip na transport (CAR/BUS/TRUCK):");
                TransportType type = TransportType.valueOf(typeInput);

                String sizeString = "";
                switch (type) {
                    case CAR, BUS:
                        sizeString = "Izberete kolko na broi hora shte budat prevozvani: ";
                        break;
                    case TRUCK:
                        sizeString = "Izberete tejesta na tovara: ";
                        break;
                }

                List<Vehicle> availableVehicles = VehicleDao.getVehiclesForCompany(currentCompany);
                Vehicle chosenVehicle = VehicleService.selectVehicle(scanner, availableVehicles);

                int size = InputUtil.readInt(scanner, sizeString);

                List<Employee> employeeList = EmployeeDao.getEmployeesForCompany(currentCompany);
                Employee employee = EmployeeService.selectEmployee(scanner, employeeList);

                boolean status = InputUtil.readBoolean(scanner, "Dostavkata zaplatena li e? (yes/no)");

                List<Client> allClients = ClientDao.getClientsForCompany(currentCompany);
                Optional<Client> maybeClient = ClientService.selectClient(scanner, allClients);
                if (!maybeClient.isPresent()) {
                    break;
                }
                Client selectedClient = maybeClient.get();

                try {

                    Transport transport = TransportService.createTransport(departure, arrival,
                            departureLocation,
                            arrivalLocation, price, type, size,
                            currentCompany,
                            employee, chosenVehicle, status, selectedClient);
                    TransportDao.createTransport(transport);
                    System.out.println("Uspeshno suzdaden!");
                } catch (InvalidVehicleTypeException | InvalidEmployeeLicenseException
                        | InsufficientVehicleCapacityException e) {
                    System.out.println(e.getMessage());
                }
                break;
            // status change
            case 2:
                System.out.println("Izberete transporta, chiito status da bude flipnat:");
                Transport selectedTransport = TransportService.selectTransport(scanner, transportList);
                selectedTransport.flipStatus();

                TransportDao.updateTransport(selectedTransport);
                break;
            case 0:
                break;
            default:
                System.out.println("Ne sushtestvuva.");
                break;
        }
    }

    private static void employeesMenu(Scanner scanner, Company currentCompany) {
        Menu companyEmployeeMenu = new Menu(currentCompany.getName() + " slujiteli");
        companyEmployeeMenu.addOption(1, "Dobavqne");
        companyEmployeeMenu.addOption(2, "Redaktirane");
        companyEmployeeMenu.addOption(3, "Iztrivane");
        companyEmployeeMenu.addOption(0, "back");
        List<Employee> employeeList = EmployeeDao.getEmployeesForCompany(currentCompany);

        int employeeChoice = companyEmployeeMenu.listen(scanner, "");
        switch (employeeChoice) {
            // add employee
            case 1: {

                String name = InputUtil.readString(scanner, "Izberete ime:");

                String licenseInput = InputUtil.readString(scanner,
                        "Izberete knijka (A/B/C):");
                License license = License.valueOf(licenseInput);

                long salary = InputUtil.readLong(scanner, "Izberete zaplata:");

                Employee employee = new Employee(name, license, currentCompany, salary);
                EmployeeDao.createEmployee(employee);

                break;
            }

            // edit employee
            case 2: {
                Employee selectedEmployee = EmployeeService.selectEmployee(scanner, employeeList);
                if (selectedEmployee == null) {
                    break;
                }
                String name = InputUtil.readString(scanner, "Izberete ime (string/no):");
                if (!name.equals("no")) {
                    selectedEmployee.setName(name);
                }

                String licenseInput = InputUtil.readString(scanner,
                        "Izberete knijka (A/B/C/no):");
                if (!licenseInput.equals("no")) {
                    License license = License.valueOf(licenseInput);
                    selectedEmployee.setLicense(license);
                }

                long salary = InputUtil.readLong(scanner, "Izberete zaplata (long/-1):");
                if (salary != -1) {
                    selectedEmployee.setSalary(salary);
                }

                EmployeeDao.updateEmployee(selectedEmployee);

                break;
            }

            // delete employee
            case 3:
                Employee employeeForDeletion = EmployeeService.selectEmployee(scanner, employeeList);
                if (employeeForDeletion == null) {
                    break;
                }
                EmployeeDao.deleteEmployee(employeeForDeletion);
                break;

            case 0:
                break;
            default:
                System.out.println("Ne sushtestvuva.");
                break;
        }
    }

    private static void vehiclesMenu(Scanner scanner, Company currentCompany) {
        Menu companyVehiclesMenu = new Menu(currentCompany.getName() + " prevozni sredstva");
        companyVehiclesMenu.addOption(1, "Dobavqne");
        companyVehiclesMenu.addOption(2, "Redaktirane");
        companyVehiclesMenu.addOption(3, "Iztrivane");
        companyVehiclesMenu.addOption(0, "back");
        List<Vehicle> vehicleList = VehicleDao.getVehiclesForCompany(currentCompany);

        int vehicleChoice = companyVehiclesMenu.listen(scanner, "");
        switch (vehicleChoice) {
            // add vehicle
            case 1: {

                String transportTypeInput = InputUtil.readString(scanner,
                        "Izberete tip na transport-a (CAR/BUS/TRUCK):");
                TransportType transportType = TransportType.valueOf(transportTypeInput);

                int capacity = InputUtil.readInt(scanner, "Vuvedete max capacity-to:");

                Vehicle vehicle = new Vehicle(currentCompany, transportType, capacity);
                VehicleDao.createVehicle(vehicle);
                break;
            }

            // edit vehicle
            case 2: {
                Vehicle selectedVehicle = VehicleService.selectVehicle(scanner, vehicleList);
                if (selectedVehicle == null) {
                    break;
                }

                String typeInput = InputUtil.readString(scanner,
                        "Izberete transport type (CAR/BUS/TRUCK/no):");
                if (!typeInput.equals("no")) {
                    TransportType transportType = TransportType.valueOf(typeInput);
                    selectedVehicle.setType(transportType);
                }

                int capacity = InputUtil.readInt(scanner, "Izberete capacity (int/-1):");
                if (capacity != -1) {
                    selectedVehicle.setCapacity(capacity);
                }

                VehicleDao.updateVehicle(selectedVehicle);

                break;
            }

            // delete vehicle
            case 3:
                Vehicle vehicleForDeletion = VehicleService.selectVehicle(scanner, vehicleList);
                if (vehicleForDeletion == null) {
                    break;
                }
                VehicleDao.deleteVehicle(vehicleForDeletion);
                break;

            case 0:
                break;
            default:
                System.out.println("Ne sushtestvuva.");
                break;
        }
    }

    private static void clientsMenu(Scanner scanner, Company currentCompany) {
        Menu companyClientsMenu = new Menu(currentCompany.getName() + " klienti");
        companyClientsMenu.addOption(1, "Dobavqne");
        companyClientsMenu.addOption(2, "Redaktirane");
        companyClientsMenu.addOption(3, "Iztrivane");
        companyClientsMenu.addOption(0, "back");
        List<Client> clientList = ClientDao.getClientsForCompany(currentCompany);

        int clientsChoice = companyClientsMenu.listen(scanner, "");
        switch (clientsChoice) {
            // add client
            case 1:
                String name = InputUtil.readString(scanner, "Imeto na klientut: ");
                Client client = new Client(name, currentCompany);
                ClientDao.createClient(client);
                break;

            // edit client
            case 2:
                Optional<Client> maybeClient = ClientService.selectClient(scanner, clientList);
                if (!maybeClient.isPresent()) {
                    break;
                }
                Client selectedClient = maybeClient.get();
                String newName = InputUtil.readString(scanner, "Napishete novoto ime na klientut: ");
                selectedClient.setName(newName);
                ClientDao.updateClient(selectedClient);
                break;

            // delete client
            case 3:
                Optional<Client> maybeClientForDeletion = ClientService.selectClient(scanner,
                        clientList);
                if (!maybeClientForDeletion.isPresent()) {
                    break;
                }
                Client clientForDeletion = maybeClientForDeletion.get();
                ClientDao.deleteClient(clientForDeletion);
                break;

            case 0:
                break;
            default:
                System.out.println("Ne sushtestvuva.");
                break;
        }
    }

    private static void settingsMenu(Optional<Company> maybeCompany, Scanner scanner,
            Company currentCompany) {
        Menu companySettingsMenu = new Menu(currentCompany.getName() + " nastroiki");
        companySettingsMenu.addOption(1, "Smqna na ime");
        companySettingsMenu.addOption(2, "Iztrivane");
        companySettingsMenu.addOption(0, "back");

        int menuChoice = companySettingsMenu.listen(scanner, "");
        switch (menuChoice) {
            case 1:
                String new_name = InputUtil.readString(scanner, "Novo ime: ");
                currentCompany.setName(new_name);
                CompanyDao.updateCompany(currentCompany);
                break;
            case 2:
                CompanyDao.deleteCompany(currentCompany);
                maybeCompany = Optional.empty();
                break;
            case 0:
                break;
            default:
                System.out.println("Ne sushtestvuva.");
                break;
        }
    }

}
